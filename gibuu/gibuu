#!/usr/bin/env python3

import os
config_template = os.path.abspath(os.getenv('GIBUU','.')+'/gibuu_template.opt')
gibuu_executable = os.path.abspath(os.getenv('GIBUU','.')+'/release/objects/GiBUU.x')
gibuu_converter = os.path.abspath(os.getenv('GIBUU','.')+'/gibuu2lund')
buu_directory = os.path.abspath(os.getenv('GIBUU','.')+'/buuinput')

from argparse import Namespace
target_choices = {
    'p' : Namespace(A=1,Z=1,pdfset=3000000,numEnsem=6000,lenPert=15,shadow='F',nuclPDF=0,useJetSetVec='F'),
    'D' : Namespace(A=2,Z=1,pdfset=3000300,numEnsem=5000,lenPert=20,shadow='F',nuclPDF=0,useJetSetVec='F'),
    'He': Namespace(A=4,Z=2,pdfset=3000600,numEnsem=4000,lenPert=40,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Li': Namespace(A=6,Z=3,pdfset=3000900,numEnsem=3000,lenPert=60,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Be': Namespace(A=8,Z=4,pdfset=3001200,numEnsem=2000,lenPert=80,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'C' : Namespace(A=12,Z=6,pdfset=3001500,numEnsem=1000,lenPert=120,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'N' : Namespace(A=14,Z=7,pdfset=3001800,numEnsem=1000,lenPert=120,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Al': Namespace(A=27,Z=13,pdfset=3002100,numEnsem=500,lenPert=250,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Ca': Namespace(A=40,Z=20,pdfset=3002400,numEnsem=300,lenPert=360,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Fe': Namespace(A=56,Z=28,pdfset=3002700,numEnsem=100,lenPert=560,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Cu': Namespace(A=63,Z=29,pdfset=3003000,numEnsem=100,lenPert=560,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Ag': Namespace(A=108,Z=47,pdfset=3003300,numEnsem=100,lenPert=1500,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Sn': Namespace(A=118,Z=50,pdfset=3003600,numEnsem=100,lenPert=2000,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Xe': Namespace(A=131,Z=54,pdfset=3003900,numEnsem=100,lenPert=3000,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Au': Namespace(A=200,Z=79,pdfset=3004200,numEnsem=100,lenPert=4000,shadow='T',nuclPDF=1,useJetSetVec='T'),
    'Pb': Namespace(A=207,Z=82,pdfset=3004500,numEnsem=100,lenPert=4000,shadow='T',nuclPDF=1,useJetSetVec='T'),
}

import sys
from argparse import ArgumentParser
cli = ArgumentParser()
cli.add_argument('--targ', required=True, help='target nucleus', choices=target_choices.keys())
cli.add_argument('--ebeam', required=True, help='beam energy (GeV)', type=float)
cli.add_argument('--kt', required=True, help='kt value (GeV)', type=float)
cli.add_argument('--trig', default=0, help='number of events', type=int)
cli.add_argument('--seed', default=0, help='random number generator seed', type=int)
cli.add_argument('--docker', default=False, action='store_true', help='delete all intermediate output files')
cli.add_argument('--dryrun', default=False, action='store_true')

args = cli.parse_args(sys.argv[1:])

if not os.path.isfile(config_template):
    cli.error('Could not find gibuu_template.opt at $GIBUU or .')
if not os.path.isfile(gibuu_executable):
    cli.error('Could not find GiBUU.x executable at $GIBUU or .')
if not os.path.isfile(gibuu_converter):
    cli.error('Could not find gibuu2lund executable at $GIBUU or .')
if not os.path.isdir(buu_directory):
    cli.error('Could not find buuinput directory at $GIBUU or .')

if args.seed==0:
    import time
    args.seed = int(int(time.time()*1e6)%1e9)

target = target_choices[args.targ]

substitutions = {
    'numEnsembles' : target.numEnsem,
    'length_perturbative' : target.lenPert,
    'Z' : target.Z,
    'A' : target.A,
    'NNN' : args.targ,
    'path_To_Input' : f'\'{buu_directory}\'',
    'shadow' : target.shadow,
    'SEED' : str(args.seed),
    'useJetSetVec' : target.useJetSetVec,
    'NuclearPDFtype' : target.nuclPDF,
    'MSTP(51)' : target.pdfset,
    'PARP(91)' : str(args.kt),
    'PARP(92)' : str(args.kt),
    'Ebeam' : str(args.ebeam),
    'iExperiment' : '17'
}

def generate_config(template, substitutions):
    with open(template,'r') as f:
        for line in f.readlines():
            k = line.strip().split('=').pop(0).strip()
            if k in substitutions.keys():
                line = '%s=%s'%(k,substitutions[k])
            yield line

def run(cmd, dryrun, stdin=None):
    if stdin is not None:
        print(' '.join(cmd)+' < '+str(stdin.name))
    else:
        print(' '.join(cmd))
    if dryrun:
        return True
    else:
        import subprocess
        p = subprocess.Popen(cmd,stdin=stdin,stdout=subprocess.PIPE,stderr=subprocess.STDOUT,universal_newlines=True)
        for line in iter(p.stdout.readline, ''):
            if len(line.strip())>0:
                print((line.rstrip()))
        p.wait()
        return p.returncode

if args.docker:
    import atexit,glob,os
    @atexit.register
    def cleanup():
        for x in ['dat','txt','tex','opt','bin','RG','run']:
            for y in glob.glob('*.'+x):
                os.remove(y)

with open('./gibuu.opt','w') as config_file:
    config = list(generate_config(config_template, substitutions))
    config_file.write(('\n'.join(config)))

with open('./gibuu.opt','r') as config_file:
    if 0 != run([gibuu_executable], args.dryrun, config_file):
        sys.exit(23)
    cmd = [gibuu_converter, str(args.trig), str(args.ebeam), str(target.A), str(target.Z)]
    if 0 != run(cmd, args.dryrun):
        sys.exit(24)

